heat_template_version: 2018-03-02

description: Three-Tier-App

parameters:

  guid:
    type: string
    default: nstephan

  provider_network:
    type: string
    default: external

  keypair_name:
    type: string
    default: student_key

  network_name:
    type: string
    default: network

resources:

  keypair:
    type: OS::Nova::KeyPair
    properties:
      name: "{{ guid }}-keypair"
      public_key: "{{ user_pub_key }}"
      user: "{{ opentlc_user }}"

  network_private:
    type: OS::Neutron::Net
    properties:
      name: "{{ guid }}-network"
      shared: false

  subnet_private:
    type: OS::Neutron::Subnet
    properties:
        name: "{{ guid }}-subnet"
        network_id: { get_resource: network_private }
        cidr: 192.168.47.0/24
        dns_nameservers: [ {{ dns_nameservers }} ]
        gateway_ip: 192.168.47.1
        allocation_pools:
        -  start: 192.168.47.10
           end: 192.168.47.99

  router:
    type: OS::Neutron::Router
    properties:
        name: "{{ guid }}-router"
        external_gateway_info:
            network: "{{ provider_network }}"

  router_private_interface:
    type: OS::Neutron::RouterInterface
    properties:
        router: { get_resource: router }
        subnet: { get_resource: subnet_private }

{% for security_group in security_groups|list + default_security_groups|list %}
  {{ security_group['name'] }}
    type: OS::Neutron::SecurityGroup
    properties:
        name: "{{ security_group['name'] }}"
        description: "{{ security_group['description'] }}"
  {% for rule in security_group.rules %}
        rules:
          - protocol: {{ rule['protocol'] }}
            direction: {{ rule['direction'] }}
    {% if rule['protocol'] != "ICMP" %}
            port_range_min: {{ rule['port_range_min'] }}
            port_range_max: {{ rule['port_range_max'] }}
    {% endif %}
    {% if rule['remote_ip_prefix'] is defined %}
            remote_mode: remote_ip_prefix
            remote_ip_prefix: {{ rule['remote_ip_previx'] }}
    {% endif %}
    {% if rule['remote_group_id'] is defined %}
            remote_mode: remote_group_id
            remote_group_id: {{ rule['remote_group_id'] }}
    {% endif %}
  {% endfor %}
{% endfor %}

  bastion_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ provider_network }}"

  bastion_fip_association:
    type: OS:: Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: bastion_fip }
  
{% for instance in instances %}
  {{ instance['name'] }}:
    type: OS::Heat::ResourceGroup
    properties:
      count: {{ instance['count'] }}
      resource_def:
        type: OS::Nova::Server
        properties:
        {% if instance['count'] > 1 %}
          name: {{ instance['name'] }}_%index%
        {% else %}
          name: {{ instance['name'] }}
        {% endif %}
          image: {{ instance['image_id'] }}
          key_name: { get_resource: keypair }
          flavor: {{ instance['flavor']['osp'] }}
          security_groups:
    {% for security_group in security_groups|list + default_security_groups|list %}
            - {get_resource: {{ security_group['name'] }} }
    {% endfor %}
          networks:
            - network: { get_resource: network_private }
{% endfor %}

